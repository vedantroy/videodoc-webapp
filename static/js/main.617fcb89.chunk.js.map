{"version":3,"sources":["VideoDocs.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["VideoTitle","styled","h4","VideoMetaData","div","FolderHeader","h2","Thumbnail","img","VideoCard","Card","style","height","width","backgroundColor","to","src","VideoPage","Helmet","className","id","allowFullScreen","allowTransparency","allow","borderWidth","path","element","padding","display","gap","boxSizing","VideoDocs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iiCAOA,IAAMA,EAAaC,IAAOC,GAAV,KASVC,EAAgBF,IAAOG,IAAV,KAUbC,EAAeJ,IAAOK,GAAV,KAMZC,EAAYN,IAAOO,IAAV,KAQTC,EAAY,kBAChB,6BACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,IAAKC,gBAAiB,UACvD,kBAAC,IAAD,CAAMC,GAAG,KACP,kBAACR,EAAD,CACEM,MAAO,IACPD,OAAQ,IACRI,IAAI,sCAIV,kBAAChB,EAAD,oCACA,kBAACG,EAAD,KACE,qCADF,mBAGE,+CAKAc,EAAY,kBAChB,yBAAKN,MAAO,CAAEE,MAAO,OAAQD,OAAO,SAClC,kBAACM,EAAA,EAAD,KACE,4BAAQF,IAAI,kDAEd,yBACEG,UAAU,oBACVC,GAAG,SACHT,MAAO,CAAEE,MAAM,OAASD,OAAO,SAE/B,4BACEI,IAAI,4CACJK,iBAAe,EACfC,mBAAiB,EACjBC,MAAM,0EAENZ,MAAO,CAAEE,MAAM,OAASD,OAAO,OAASY,YAAa,YAM9C,oBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAK,IACLC,QACE,yBAAKf,MAAO,CAAEgB,QAAS,KACrB,kBAACtB,EAAD,4BACA,yBACEM,MAAO,CACLiB,QAAS,OACTf,MAAO,OACPgB,IAAK,GACLC,UAAW,eAGb,kBAAC,EAAD,UAKR,kBAAC,IAAD,CAAOL,KAAK,OAAOC,QAAS,kBAAC,EAAD,UClGjB,oBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOD,KAAK,iBAAiBC,QAAS,kBAACK,EAAD,U,MCMtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAACC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.617fcb89.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, Routes, Route } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport Card from \"@material-ui/core/Card\";\nimport styled from \"styled-components\";\n\n// font-feature-settings: \"kern\", \"liga\";\nconst VideoTitle = styled.h4`\n  font-family: Inter, Helvetica, sans-serif;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 26px;\n  margin-top: 12px;\n  margin-bottom: 0px;\n`;\n\nconst VideoMetaData = styled.div`\n  display: flex;\n  flex-direction: row;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 20px;\n  font-family: Inter, Helvetica, sans-serif;\n  color: rgb(145, 148, 161);\n`;\n\nconst FolderHeader = styled.h2`\n  font-family: Inter, Helvetica, sans-serif;\n  font-weight: 600;\n  line-height: 32px;\n`;\n\nconst Thumbnail = styled.img`\n  object-fit: cover;\n  transition: opacity 0.25s;\n  &: hover {\n    opacity: 0.8;\n  }\n`;\n\nconst VideoCard = () => (\n  <div>\n    <Card style={{ height: 180, width: 320, backgroundColor: \"black\" }}>\n      <Link to=\"1\">\n        <Thumbnail\n          width={320}\n          height={180}\n          src=\"https://i.imgur.com/OF7ppmy.png\"\n        />\n      </Link>\n    </Card>\n    <VideoTitle>Watch External Dependencies</VideoTitle>\n    <VideoMetaData>\n      <div>0:54</div>\n      &nbsp; â€¢ &nbsp;\n      <div>3 years ago</div>\n    </VideoMetaData>\n  </div>\n);\n\nconst VideoPage = () => (\n  <div style={{ width: \"100%\", height: `100%` }}>\n    <Helmet>\n      <script src=\"https://cdn.plyr.io/3.6.2/plyr.polyfilled.js\"></script>\n    </Helmet>\n    <div\n      className=\"plyr__video-embed\"\n      id=\"player\"\n      style={{ width: `100%`, height: `100%` }}\n    >\n      <iframe\n        src=\"https://www.youtube.com/embed/LM_GRdirDCo\"\n        allowFullScreen\n        allowTransparency\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        //allow=\"autoplay\"\n        style={{ width: `100%`, height: `100%`, borderWidth: \"0px\" }}\n      ></iframe>\n    </div>\n  </div>\n);\n\nexport default () => (\n  <Routes>\n    <Route\n      path=\"/\"\n      element={\n        <div style={{ padding: 25 }}>\n          <FolderHeader>Babel Commit Videos</FolderHeader>\n          <div\n            style={{\n              display: \"grid\",\n              width: \"100%\",\n              gap: 25,\n              boxSizing: \"border-box\",\n            }}\n          >\n            <VideoCard />\n          </div>\n        </div>\n      }\n    />\n    <Route path=\"/:id\" element={<VideoPage />} />\n  </Routes>\n);\n","import React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport VideoDocs from \"./VideoDocs\";\n\nexport default () => (\n  <Routes>\n    <Route path=\"/babel/babel/*\" element={<VideoDocs />} />\n  </Routes>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  // prettier-ignore\n  <React.StrictMode>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}